You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.

class Solution {
public:
    void insert_node(ListNode *&root,int n){
        if(root==NULL){
            root=new ListNode(n);
            return;
        }
        ListNode *temp=root;
        while(temp->next!=NULL){
            temp=temp->next;
        }
        temp->next=new ListNode(n);
        return;
    }
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode *res=NULL;
        int carry=0;
        while(l1!=NULL and l2!=NULL){
            int temp=l1->val+l2->val+carry;
            insert_node(res,temp%10);
            carry=temp/10;
            l1=l1->next;
            l2=l2->next;
        }
        while(l1!=NULL){
            int temp=l1->val+carry;
            insert_node(res,temp%10);
            carry=temp/10;
            l1=l1->next;
        }
        while(l2!=NULL){
            int temp=l2->val+carry;
            insert_node(res,temp%10);
            carry=temp/10;
            l2=l2->next;
        }
        if(carry!=0){
            insert_node(res,carry);
        }
        return res;
    }
};
