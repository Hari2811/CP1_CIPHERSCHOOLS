Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position. Return the max sliding window.

Follow up:
Could you solve it in linear time?

class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {

        vector<int> ans(nums.size() - k + 1);
        deque<int> dq;
        for (int i = 0; i < nums.size(); ++i) {

            while (!dq.empty() && nums[i] > nums[dq.back()]) 
                dq.pop_back();
            dq.push_back(i);

            if (i - dq.front() + 1 > k) dq.pop_front();

            if (i >= k - 1) ans[i - k + 1] = nums[dq.front()];
        }

        return ans;
        }
};
